First , make sure that you have GIT installed on your PC.  I used the executable, Git-1.9.5-preview20150319.exe
Make certain that you select the option to install Git Bash.

-- Open Git bash  (I had to use Administrator priveledges to change the settings like font, window size, etc.)


$ git config --global user.name "Steve DeLillo"

delillol@ADMIN-DELILLOL ~
$ git config --global user.email "delillol@yahoo.com"

delillol@ADMIN-DELILLOL ~
$ git config --list
core.symlinks=false
core.autocrlf=true
color.diff=auto
color.status=auto
color.branch=auto
color.interactive=true
pack.packsizelimit=2g
help.format=html
http.sslcainfo=/bin/curl-ca-bundle.crt
sendemail.smtpserver=/bin/msmtp.exe
diff.astextplain.textconv=astextplain
rebase.autosquash=true
user.name=Steve DeLillo
user.email=delillol@yahoo.com
push.default=simple


delillol@ADMIN-DELILLOL ~
$ git config user.email
delillol@yahoo.com


delillol@ADMIN-DELILLOL ~
$ pwd
/c/Users/IBM_ADMIN


delillol@ADMIN-DELILLOL ~
$ cd Desktop/GIT


To initialize a Git repository:
-----------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT
$ git init
Initialized empty Git repository in c:/Users/IBM_ADMIN/Desktop/GIT/.git/


-- Put file(s) into /c/Users/IBM_ADMIN/Desktop/GIT   folder


Add all changes made to project  (basically, using "git add" puts files into staging area before committing):
----------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git add .						==> the . is for whole directory, so everything will get added to staging area.


Now, commit (snapshot of point in time.  Always use -m with message).  Now you can always come back to this commit and fix any errors.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git commit -m "This is our first commit"
[master (root-commit) 401cc6e] This is our first commit
 1 file changed, 43 insertions(+)
 create mode 100644 Git_tutorial.txt


How to view all commits:
-------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git log
commit 401cc6e5a47461e536502e8606a180925033d421
Author: Steve DeLillo <delillol@yahoo.com>
Date:   Fri Aug 21 18:55:29 2015 -0700

    This is our first commit


How to view commits from a specific user (no need to use full user name):
---------------------------------------------------------------------------------------------
$ git log --author="Steve"
commit 401cc6e5a47461e536502e8606a180925033d421
Author: Steve DeLillo <delillol@yahoo.com>
Date:   Fri Aug 21 18:55:29 2015 -0700

    This is our first commit



----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
Now we make changes to our file(s) and also add new files to the Git folder
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   Git_tutorial.txt					===> Modified file

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        Test_second_file.txt					===> New file
        Test_third_file.txt					===> New file


Now add one of the new files to staging area:
--------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git add Test_second_file.txt


Now we can see "Test_second_file.txt" file in staging area:
-------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   Test_second_file.txt

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   Git_tutorial.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        Test_third_file.txt


Now, commit the second test file to the Git folder:
-------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git commit -m "Adding Test_second_file.txtTest_second_file.txt to the repository"
[master 5f55c20] Adding Test_second_file.txtTest_second_file.txt to the repository
 1 file changed, 1 insertion(+)
 create mode 100644 Test_second_file.txt


Now we see both commits in the log:
----------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git log
commit 5f55c20c0ed709a8d76505a71ecdaa03184607ed
Author: Steve DeLillo <delillol@yahoo.com>
Date:   Fri Aug 21 19:11:25 2015 -0700

    Adding Test_second_file.txtTest_second_file.txt to the repository

commit 401cc6e5a47461e536502e8606a180925033d421
Author: Steve DeLillo <delillol@yahoo.com>
Date:   Fri Aug 21 18:55:29 2015 -0700

    This is our first commit


Now add and commit the changed file to repository:
----------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git add Git_tutorial.txt

delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git commit -m "Commit second change to Git_tutorial.txt file"
[master 83c6738] Commit second change to Git_tutorial.txt file
 1 file changed, 82 insertions(+)


Now, in the status, there are no more modified or added files:
----------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git status
On branch master
nothing to commit, working directory clean



Make changes to Git_tutorial.txt file and see the differences between the committed file (in the repository) and the 
changed file (in the working dir).  Everything in GREEN will be the changes going into the committed file (not shown, here)
-------------------------------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git diff
diff --git a/Git_tutorial.txt b/Git_tutorial.txt
index d8ff83d..0690853 100644
---   a/Git_tutorial.txt
+++ b/Git_tutorial.txt
@@ -36,6 +36,8 @@


After adding and committing the file(s), again, no difference will be seen:
------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git add Git_tutorial.txt

delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git commit -m "Commit Git_tutorial.txt changes, again"
[master 4985b77] Commit Git_tutorial.txt changes, again
 1 file changed, 60 insertions(+), 6 deletions(-)

delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git status
On branch master
nothing to commit, working directory clean

delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git diff


-- "git diff --staged"    compares staging area copy and repository copy


------------------------------
------------------------------
If we want to delete files
------------------------------
------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git rm Test_third_file.txt				==>  This will be delete both local copy and repository copy, but you still need to commit change
rm 'Test_third_file.txt'


delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git commit -m "We deleted the Test_third_file.txt file"
[master 281b232] We deleted the Test_third_file.txt file
 1 file changed, 1 deletion(-)
 delete mode 100644 Test_third_file.txt


delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git status
On branch master
nothing to commit, working directory clean



--------------------
--------------------
To rename files
--------------------
--------------------
-- First, I renamed "Test_second_file.txt" to "Test_second_file_rename.txt" just using the window.  This is the hard way.
   The easier way is shown, later, with "git mv"


However, Git sees it like we deleted "Test_second_file.txt" and added a new file, "Test_second_file_rename.txt":
-------------------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    Test_second_file.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        Test_second_file_rename.txt

no changes added to commit (use "git add" and/or "git commit -a")


So, you have to add the new file and rm the old file for Git to see as renamed:
------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git add Test_second_file_rename.txt


------------------------------------------------------
------------------------------------------------------
Rename file(s) the easy way using "git mv":
------------------------------------------------------
------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git mv Test_second_file_rename.txt Test_second_renamed_with_git.txt


You still have to commit it:
--------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git commit -m "Committing the renamed Test_second_renamed_with_git.txt file"
[master e313424] Committing the renamed Test_second_renamed_with_git.txt file
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename Test_second_file_rename.txt => Test_second_renamed_with_git.txt (100%)


delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git rm Test_second_file.txt
rm 'Test_second_file.txt'


delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        renamed:    Test_second_file.txt -> Test_second_file_rename.txt


delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git commit -m "Renamed Test_second_file.txt to Test_second_file_rename.txt"
[master 1db438b] Renamed Test_second_file.txt to Test_second_file_rename.txt
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename Test_second_file.txt => Test_second_file_rename.txt (100%)


---------------
---------------
Moving files
---------------
---------------

-- Added a directory in the initialized Git folder called, "Folder_for_move"


New directory structure looks like this:
-----------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ ls -al
total 22
drwxr-xr-x    6 delillol   Administ      4096 Aug 22 12:15 .
dr-xr-xr-x     1 delillol   Administ    28672 Aug 22 12:03 ..
drwxr-xr-x    12 delillol Administ      4096 Aug 22 12:00 .git
drwxr-xr-x    2 delillol   Administ             0 Aug 22 12:15 Folder_for_move
-rw-r--r--     1 delillol    Administ       5944 Aug 21 19:27 Git_tutorial.txt
-rw-r--r--     1 delillol    Administ           49 Aug 21 19:35 Test_second_renamed_with_git.txt


The following Git command moves the file to the "Folder_for_move" directory and renames the file, at the same time:
-------------------------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git mv Test_second_renamed_with_git.txt Folder_for_move/Test_second_moved.txt


delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        renamed:    Test_second_renamed_with_git.txt -> Folder_for_move/Test_second_moved.txt


Now commit the changes:
--------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git commit -m "We moved Test_second_renamed_with_git.txt to the Folder_for_move directory"
[master 6ab25fe] We moved Test_second_renamed_with_git.txt to the Folder_for_move directory
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename Test_second_renamed_with_git.txt => Folder_for_move/Test_second_moved.txt (100%)



-----------------------------------------
-----------------------------------------
Committing directly to repository:
-----------------------------------------
-----------------------------------------

-- First, change your file.


Now you can see the changed file:
-------------------------------------------
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   Git_tutorial.txt


To force a commit, use "-a" option.  This skips the staging area.  Be careful, though.  This will commit 
EVERY file that has changed in the directory.  Also, only use when you are making simple edits to files.
-------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/Git (master)
$ git commit -am "Forced commit of Git_tutorial.txt - no git add"
[master 39d452c] Forced commit of Git_tutorial.txt - no git add
 1 file changed, 198 insertions(+), 1 deletion(-)



----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Fixing a mistake.  Bring a repository copy back to the local workspace:
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
 
Here, we can see the changed file.  Test_second_moved.txt has some added text that we never wanted to do:
-----------------------------------------------------------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   Folder_for_move/Test_second_moved.txt

no changes added to commit (use "git add" and/or "git commit -a")


Using "git checkout" will bring the one in the repository back to local:
------------------------------------------------------------------------------------
delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git checkout -- Folder_for_move/Test_second_moved.txt

delillol@ADMIN-DELILLOL ~/Desktop/GIT (master)
$ git status
On branch master
nothing to commit, working directory clean



-----------------------------------------------------------------
-----------------------------------------------------------------
Unstaging a file because you don't want to commit it:
-----------------------------------------------------------------
-----------------------------------------------------------------

If you added a file(s) to a staging area using "git add" and decided that you don't want it there, anymore, you need 
to bring the staged copy back to the local working directory.

Use "git reset HEAD <file name>" to bring it back to local.  Note:  "git status" will now see this file as modified (as you would expect)



--------------------------------------------------------------
--------------------------------------------------------------
How to get old versions of project from repository:
--------------------------------------------------------------
--------------------------------------------------------------

-- Note:  It's important to know that no version gets deleted.  You just make an older version the newest version in the repository







